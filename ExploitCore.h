// 作者：有问题联系～ pxx917144686

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

// 漏洞利用变体类型
typedef NS_ENUM(NSInteger, ExploitVariant) {
    ExploitVariantXNU = 0,          // XNU VM_BEHAVIOR_ZERO_WIRED_PAGES
    ExploitVariantCVE_2025_31200,   // VM映射权限绕过
    ExploitVariantCVE_2025_31201,   // APRR权限控制绕过
    ExploitVariantCVE_2025_24085,   // 压缩内存子系统漏洞
    ExploitVariantChained           // 漏洞链
};

// 漏洞链阶段回调
typedef void (^ChainStageCallback)(int stage, NSString *message, BOOL success);

@interface ExploitCore : NSObject

// 单例方法
+ (instancetype)sharedInstance;

// 属性
@property (nonatomic, strong) NSString *exploitStatus;
@property (nonatomic, assign) BOOL isExploitEnabled;
@property (nonatomic, assign) ExploitVariant currentVariant;

// 核心方法
- (void)prepareExploit;
- (void)setExploitVariant:(ExploitVariant)variant;
- (void)runExploitWithPath:(NSString *)path completion:(void (^)(BOOL success, NSString *message))completion;
- (NSString *)createTestFile;
- (BOOL)removeTestFile:(NSString *)path;

// 获取漏洞信息
- (NSDictionary *)getExploitInfo;
- (NSString *)getExploitVariantDescription;

// 漏洞链执行方法
- (void)runChainedExploitWithPath:(NSString *)path 
                  stageCompletion:(ChainStageCallback)stageCallback
                       completion:(void (^)(BOOL success, NSString *message))completion;

// 获取攻击链详细信息
- (NSDictionary *)getChainedExploitInfo;

@end

NS_ASSUME_NONNULL_END
